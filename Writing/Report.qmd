---
author: [Coltin Colucci, Grant Anderson, Javier Benjarno, Megan Wolfarth, Willem Bennett]
title: How is the run time affected in a vertical and horizontal subclassing hierarchy?
page-layout: full
categories: [post, objects, subclasses]
date: "2025-02-18"
date-format: long
toc: true
format:
    html:
        code-links:    
            - text: Github Repository
              icon: github
              href: https://github.com/ganderson03/algorithmology-all-hands-object-subclassing

---

*make sure to delete your below section assignment once you finish/implement your section of the document. thanks.*

Willem : Transfering Data Tables to Report / Measurements

Coltin : Data analysis

Javier : Conclusion


## Overview

Using objects and classes in python is a great way to encapsulate both data and functionality, while being easy to implement and use. Larger implementations via object oriented programming may require subclass hierarchies with large depth and breadth. This experiment tests how depth and breadth of subclassing can affect running time of a program. The tool calculates the areas of different shapes via different subclasses and measures the time to run throughout to measure the effect of subclass layer depth. 

## Implementation

For our experiment, we set up two inheritance hierarchies to test how runtime is affected by a deep (vertical) hierarchy compared to a wide (horizontal) hierarchy. Both of these hierarchies were polygon-based, where each subclass calculated the area of a different shape. For the vertical hierarchy, each class was inherited from the class above it for a total of ten subclasses and ten levels. For the horizontal hierarchy, each class was a subclass of a single base class for one level eight wide. In order to test runtime for the vertical hierarchy, we created two classes, square and rectangle, at the top of the hierarchy, and recreated those two classes at the bottom of the hierarchy. We then instantiated those four classes and used the `time` module in the `measure_performance` function to determine the runtime for each instantiation. To test runtime for the horizontal hierarchy, we created eight subclasses, all inherited from the `Shape` base class. We then instantiated those eight classes and used the `time` module in the `measure_performance` function to determine the runtime for each instantiation.

The `measure_performance` function is the function we used to determine the runtime for classes in the horizontal and vertical hierarchies. To determine the runtime, the function ran 10,000,000 iterations for each class, using the `time` module to determine the elapsed time by subtracting the start time from the end time.

```python
def measure_performance():
    iterations = 10000000

    shapes = [
        (Square(5), "Square (Top)"),
        (Rectangle(5, 10), "Rectangle (Top)"),
        (DeepSquare(5), "Square (Bottom)"),
        (DeepRectangle(5, 10), "Rectangle (Bottom)"),
    ]

    for shape, name in shapes:
        start_time = time.time()
        for _ in range(iterations):
            _ = shape.area()
        elapsed_time = time.time() - start_time

        # Print the results
        print(f"{name}: Time for {iterations} iterations: {elapsed_time:.6f} seconds")
```

## Data 

### Horizontal Subclasses

| Class | Iterations | Run 1 | Run 2 | Run 3 |
|:-----:|:----------:|:-----:|:-----:|:-----:|
|       |            | []    | []    | []    |
|       |            | []    | []    | []    |
|       |            | []    | []    | []    |

### Verticle Subclasses

| Class | Level | Iterations | Run 1 | Run 2 | Run 3 |
|:-----:|:-----:|:----------:|:-----:|:-----:|:-----:|
|       |       |            | []    | []    | []    |
|       |       |            | []    | []    | []    |
|       |       |            | []    | []    | []    |

## Analysis
In our original hypothesis we figured that the deeper you went into a class hierarchy structure the more that the run time would be affected. However when we actually ran the experiment we found that python has some pretty neat features working in the background to prevent this from happening.


*  **Dynamic Method Resolution**
Dynamic Method Resolution means that when a method is called python looks up the class where the object was instantiated at and checks the class hierarchy dynamically at run time. The lookup is very fast and does not include any special overhead for deeper hierarchies.


* **Inheritance Lookup Overhead**
Python caches method resolution for an instance. If you have a deeper hierarchy python still only performs the lookup once as if the class were flat.


* **Attribute Lookup**
In our example calculating the area of the shapes was our attribute. We did see a difference in run time when the area calculation was more complex for certain shapes however, this was still minimal and didn't compact with how deep in the class structure each shape necessarily was.


* **Python's Optimization**
All of the features listed above come to help us to better explain or results. Python is extremely optimized for tasks such as moving through class hierarchies and that is why our results showed little to no difference the deeper you go into these hierarchies.


* **Other Languages**
Looking deeper into the topic of class hierarchy overhead it actually does play a factor in other languages. In C particularly there is no support for  classes or inheritance without any additional features. You would have to manually implement them using structs function pointers or other manual techniques. This means that you would not benefit from any of the optimizations that do exist in python. Languages such as Rust and Go also lack these optimizations. Running a similar experiment in those languages may give you a different result than in python due to this.


## Conclusion