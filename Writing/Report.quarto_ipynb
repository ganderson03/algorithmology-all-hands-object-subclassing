{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "author: [Coltin Colucci, Grant Anderson, Megan Wolfarth, Javier Benjarno, Willem Bennett]\n",
        "title: How is the run time affected by going through a subclassing hierarchy in both a vertical hierarchy and a more horizontal hierarchy?\n",
        "page-layout: full\n",
        "categories: [post, objects, subclasses]\n",
        "date: \"2025-02-18\"\n",
        "date-format: long\n",
        "toc: true\n",
        "format:\n",
        "    html:\n",
        "        code-fold: true\n",
        "        code-links:    \n",
        "            - text: Github Repository\n",
        "              icon: github\n",
        "              href: https://github.com/ganderson03/algorithmology-all-hands-object-subclassing\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "*make sure to delete your below section assignment once you finish/implement your section of the document. thanks.*\n",
        "\n",
        "Megan : Implementation\n",
        "\n",
        "Willem : Transfering Data Tables to Report / Measurements\n",
        "\n",
        "Coltin : Data analysis\n",
        "\n",
        "Javier : Conclusion\n",
        "\n",
        "\n",
        "## Overview\n",
        "\n",
        "Using objects and classes in python is a great way to encapsulate both data and functionality, while being easy to implement and use. Larger implementations via object oriented programming may require subclass hierarchies with large depth and breadth. This experiment tests how depth and breadth of subclassing can affect running time of a program. The tool calculates the areas of different shapes via different subclasses and measures the time to run throughout to measure the effect of subclass layer depth. \n",
        "\n",
        "## Implementation\n"
      ],
      "id": "d7d76305"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Level 1: Square, Rectangle, Circle, Triangle, Pentagon, Hexagon, Heptagon, Octagon\n",
        "class Square(Shape):\n",
        "    def __init__(self, side_length):\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return self.side_length ** 2\n",
        "\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, width, height):\n",
        "        self.width = width\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        return self.width * self.height\n",
        "\n",
        "class Circle(Shape):\n",
        "    def __init__(self, radius):\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return 3.14159 * (self.radius ** 2)\n",
        "\n",
        "class Triangle(Shape):\n",
        "    def __init__(self, base, height):\n",
        "        self.base = base\n",
        "        self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        return 0.5 * self.base * self.height\n",
        "\n",
        "class Pentagon(Shape):\n",
        "    def __init__(self, side_length):\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return (5 / 4) * (self.side_length ** 2) / (3.14159 / 5)\n",
        "\n",
        "class Hexagon(Shape):\n",
        "    def __init__(self, side_length):\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return (3 * 3**0.5 / 2) * self.side_length ** 2\n",
        "\n",
        "class Heptagon(Shape):\n",
        "    def __init__(self, side_length):\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return (7 / 4) * (self.side_length ** 2) / (3.14159 / 7)\n",
        "\n",
        "class Octagon(Shape):\n",
        "    def __init__(self, side_length):\n",
        "        self.side_length = side_length\n",
        "\n",
        "    def area(self):\n",
        "        return 2 * (1 + 2**0.5) * self.side_length ** 2"
      ],
      "id": "a5daf2c7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data \n",
        "\n",
        "## Analysis\n",
        "\n",
        "## Conclusion"
      ],
      "id": "4df7f0fb"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\grant\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}